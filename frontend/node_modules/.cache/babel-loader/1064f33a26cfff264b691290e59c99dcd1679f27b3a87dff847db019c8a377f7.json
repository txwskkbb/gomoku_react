{"ast":null,"code":"var _jsxFileName = \"/home/txwskkbb/gomoku_react_flask/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport Board from './components/Board';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = 'http://127.0.0.1:5000'; // Flask server URL\nconst BOARD_SIZE = 15;\nconst EMPTY = 0;\nfunction App() {\n  _s();\n  const [board, setBoard] = useState(Array.from({\n    length: BOARD_SIZE\n  }, () => Array(BOARD_SIZE).fill(EMPTY)));\n  const [gameOver, setGameOver] = useState(false);\n  const [message, setMessage] = useState('游戏开始，请落子');\n  const [isPlayerTurn, setIsPlayerTurn] = useState(true);\n  const handleRestart = useCallback(async () => {\n    try {\n      const response = await fetch(`${API_URL}/api/restart`, {\n        method: 'POST'\n      });\n      const data = await response.json();\n      setBoard(data.board);\n      setGameOver(data.gameOver);\n      setMessage(data.message);\n      setIsPlayerTurn(true);\n    } catch (error) {\n      console.error('Error restarting game:', error);\n      setMessage('无法连接到服务器。');\n    }\n  }, []);\n\n  // Fetch initial state on component mount\n  useEffect(() => {\n    handleRestart();\n  }, [handleRestart]);\n  const handleCellClick = async (row, col) => {\n    if (gameOver || !isPlayerTurn || board[row][col] !== EMPTY) {\n      return;\n    }\n\n    // Optimistic update for better UX\n    const newBoard = board.map(r => [...r]);\n    newBoard[row][col] = 1; // Player's stone\n    setBoard(newBoard);\n    setIsPlayerTurn(false);\n    setMessage('AI 正在思考...');\n    try {\n      const response = await fetch(`${API_URL}/api/move`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          row,\n          col\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      setBoard(data.board);\n      setGameOver(data.gameOver);\n      setMessage(data.message);\n      if (!data.gameOver) {\n        setIsPlayerTurn(true);\n      }\n    } catch (error) {\n      console.error('Error making move:', error);\n      setMessage('与服务器通信失败，请重试。');\n      // Revert optimistic update on error\n      handleRestart();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u4E94\\u5B50\\u68CB - React & Python AI\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"msg\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"restart\",\n        onClick: handleRestart,\n        children: \"\\u91CD\\u65B0\\u5F00\\u59CB\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      board: board,\n      onCellClick: handleCellClick,\n      disabled: !isPlayerTurn || gameOver\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"xyPnM+IHnL7ZpD33rFxMK5o4os8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Board","jsxDEV","_jsxDEV","API_URL","BOARD_SIZE","EMPTY","App","_s","board","setBoard","Array","from","length","fill","gameOver","setGameOver","message","setMessage","isPlayerTurn","setIsPlayerTurn","handleRestart","response","fetch","method","data","json","error","console","handleCellClick","row","col","newBoard","map","r","headers","body","JSON","stringify","ok","Error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","onClick","onCellClick","disabled","_c","$RefreshReg$"],"sources":["/home/txwskkbb/gomoku_react_flask/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport Board from './components/Board';\nimport './App.css';\n\nconst API_URL = 'http://127.0.0.1:5000'; // Flask server URL\nconst BOARD_SIZE = 15;\nconst EMPTY = 0;\n\nfunction App() {\n  const [board, setBoard] = useState(Array.from({ length: BOARD_SIZE }, () => Array(BOARD_SIZE).fill(EMPTY)));\n  const [gameOver, setGameOver] = useState(false);\n  const [message, setMessage] = useState('游戏开始，请落子');\n  const [isPlayerTurn, setIsPlayerTurn] = useState(true);\n\n  const handleRestart = useCallback(async () => {\n    try {\n      const response = await fetch(`${API_URL}/api/restart`, { method: 'POST' });\n      const data = await response.json();\n      setBoard(data.board);\n      setGameOver(data.gameOver);\n      setMessage(data.message);\n      setIsPlayerTurn(true);\n    } catch (error) {\n      console.error('Error restarting game:', error);\n      setMessage('无法连接到服务器。');\n    }\n  }, []);\n\n  // Fetch initial state on component mount\n  useEffect(() => {\n    handleRestart();\n  }, [handleRestart]);\n\n\n  const handleCellClick = async (row, col) => {\n    if (gameOver || !isPlayerTurn || board[row][col] !== EMPTY) {\n      return;\n    }\n\n    // Optimistic update for better UX\n    const newBoard = board.map(r => [...r]);\n    newBoard[row][col] = 1; // Player's stone\n    setBoard(newBoard);\n    setIsPlayerTurn(false);\n    setMessage('AI 正在思考...');\n\n    try {\n      const response = await fetch(`${API_URL}/api/move`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ row, col }),\n      });\n      if (!response.ok) {\n          throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      setBoard(data.board);\n      setGameOver(data.gameOver);\n      setMessage(data.message);\n      if (!data.gameOver) {\n        setIsPlayerTurn(true);\n      }\n    } catch (error) {\n      console.error('Error making move:', error);\n      setMessage('与服务器通信失败，请重试。');\n      // Revert optimistic update on error\n      handleRestart();\n    }\n  };\n\n  return (\n    <div className=\"app-container\">\n      <h1>五子棋 - React & Python AI</h1>\n      <div className=\"game-info\">\n        <p id=\"msg\">{message}</p>\n        <button id=\"restart\" onClick={handleRestart}>重新开始</button>\n      </div>\n      <Board board={board} onCellClick={handleCellClick} disabled={!isPlayerTurn || gameOver} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}